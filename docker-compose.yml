version: "3.7"

########################### NETWORKS
networks:
  traefik_net:
    external:
      name: traefik_net
  default:
    driver: bridge


configs:
  traefik_log:
    file: $USERDIR/traefik/traefik.log

########################### SERVICES
services:

############################# FRONTENDS

# Traefik - Reverse Proxy
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 traefik_net
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255
# touch $USERDIR/traefik/acme/acme.json
# chmod 600 $USERDIR/traefik/acme/acme.json
# touch $USERDIR/traefik/traefik.log
  traefik:
    container_name: traefik
    image: traefik:v2.2.1
    restart: always
    depends_on:
      - influxdb
      - oauth
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
#      - --entrypoints.http.forwardedHeaders.trustedIPs=127.0.0.1/31, 192.168.90.1/24
#      - --entrypoints.http.proxyProtocol=true
#      - --entrypoints.http.proxyProtocol.trustedIPs=127.0.0.1/31, 192.168.90.1/24
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.http-web.address=:8044
      - --entryPoints.https-web.address=:44344
      - --entryPoints.traefik.address=:8080
      - --serverstransport.insecureskipverify=true
      - --api.dashboard=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog.filePath=/var/log/myTraefik/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-599
      - --providers.docker=true
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_net
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.dns-cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.dns-cloudflare.acme.dnschallenge.delaybeforecheck=60
      - --metrics.influxdb=true
      - --metrics.influxdb.address=influxdb:8086
      - --metrics.influxdb.protocol=http
      - --metrics.influxdb.database=traefik
      - --metrics.influxdb.username=$INFLUXDB_WRITE_USER
      - --metrics.influxdb.password=$INFLUXDB_WRITE_USER_PASSWORD
      - --metrics.influxdb.pushInterval=1s
    networks:
      traefik_net:
        ipv4_address: 192.168.90.254
    dns:
      - $DNS_SERVER
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 44344
        published: 44344
        protocol: tcp
        mode: host
      - target: 8044
        published: 8044
        protocol: tcp
        mode: host
    volumes:
      - ./traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/traefik/acme:/acme # cert location - you must touch this file and change permissions to 600
      - $USERDIR/traefik/log:/var/log/myTraefik # for fail2ban - make sure to touch file before starting container
      - $USERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
        # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"




  influxdb:
    container_name: influxdb
    image: influxdb:1.5.4-alpine
    restart: always
    networks:
      traefik_net:
        ipv4_address: 192.168.90.200
    volumes:
      - $USERDIR/influxdb:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=$INFLUXDB_DB
      - INFLUXDB_WRITE_USER=$INFLUXDB_WRITE_USER
      - INFLUXDB_WRITE_USER_PASSWORD=$INFLUXDB_WRITE_USER_PASSWORD
      - INFLUXDB_READ_USER=$INFLUXDB_READ_USER
      - INFLUXDB_READ_USER_PASSWORD=$INFLUXDB_READ_USER_PASSWORD
  grafana:
    container_name: grafana
    image: grafana/grafana:6.7.2
    restart: always
    user: $PUID
    networks:
      - traefik_net
    volumes:
      - $USERDIR/grafana:/var/lib/grafana
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      GF_SECURITY_ADMIN_USER: $GRAFANA_ADMIN_USERNAME
      GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_ADMIN_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      - "traefik.http.routers.grafana-rtr.tls=true"
      - "traefik.http.routers.grafana-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
# Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://console.developers.google.com/
  # Follow directions at above link. My Google settings under the Credentials tab are:
  # Credentials: Name can be anything (mine is Traefik) and Authorized redirect URLs:  	https://oauth.$DOMAINNAME/_oauth
  # OAuth Concent Screen: Application Name is Traefik (think it can be anything). I entered my e-mail for support e-mail. Authorized Domains is $DOMAINNAME
  # Domain Verification: $DOMAINNAME
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: always
    networks:
      - traefik_net
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

# Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: always
    command: -H unix:///var/run/docker.sock --no-auth
    networks:
      - traefik_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      - "traefik.http.routers.portainer-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

############################# PVRS

# Radarr - Movie management
# Set url_base in radarr settings if using PathPrefix
  radarr:
#    image: aront/radarr #for mp4_automator support
    image: linuxserver/radarr:preview
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    networks:
      - traefik_net
    volumes:
      - $USERDIR/docker/radarr:/config
      - $MEDIADIR/Downloads:/downloads
      - $MEDIADIR/Movies:/movies
#      - $USERDIR/docker/shared/mp4_automator:/config_mp4_automator
#      - /media/ds918/media/movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.tls=true"
      - "traefik.http.routers.radarr-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.radarr-feed-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-feed-rtr.rule=Host(`radarr.$DOMAINNAME`) && PathPrefix(`/feed`, `/api`)"
      - "traefik.http.routers.radarr-feed-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.radarr-feed-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-feed-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - $USERDIR/docker/bazarr:/config
      - $MEDIADIR/Movies:/movies
      - $MEDIADIR/TV:/tv
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.priority=1"
      - "traefik.http.routers.bazarr-rtr.tls=true"
      - "traefik.http.routers.bazarr-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

# Sonarr - TV Shows management
# Set url_base in sonarr settings if using PathPrefix
  sonarr:
#    image: aront/sonarr  #for mp4_automator support
    image: linuxserver/sonarr:preview
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      - traefik_net
    volumes:
      - $USERDIR/docker/sonarr:/config
      - $MEDIADIR/Downloads:/downloads
      - $MEDIADIR/TV:/tv
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=1"
      - "traefik.http.routers.sonarr-rtr.tls=true"
      - "traefik.http.routers.sonarr-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.sonarr-feed-rtr.entrypoints=https-web"
      - "traefik.http.routers.sonarr-feed-rtr.rule=Host(`sonarr.$DOMAINNAME`) && PathPrefix(`/feed`)"
      - "traefik.http.routers.sonarr-feed-rtr.priority=2"
      - "traefik.http.routers.sonarr-feed-rtr.tls=true"
      - "traefik.http.routers.sonarr-api-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-api-rtr.rule=Host(`sonarr.$DOMAINNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.sonarr-api-rtr.priority=2"
      - "traefik.http.routers.sonarr-api-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.sonarr-feed-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-api-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-feed-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-api-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

# Sonarr - TV Shows management
# Set url_base in lidarr settings if using PathPrefix
  lidarr:
#    image: aront/lidarr  #for mp4_automator support
    image: linuxserver/lidarr:preview
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    networks:
      - traefik_net
    volumes:
      - $USERDIR/docker/lidarr:/config
      - $MEDIADIR/Downloads:/downloads
      - $MEDIADIR/Music:/music
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAINNAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=1"
      - "traefik.http.routers.lidarr-rtr.tls=true"
      - "traefik.http.routers.lidarr-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.lidarr-feed-rtr.entrypoints=https-web"
      - "traefik.http.routers.lidarr-feed-rtr.rule=Host(`lidarr.$DOMAINNAME`) && PathPrefix(`/feed`)"
      - "traefik.http.routers.lidarr-feed-rtr.priority=2"
      - "traefik.http.routers.lidarr-feed-rtr.tls=true"
      - "traefik.http.routers.lidarr-api-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-api-rtr.rule=Host(`lidarr.$DOMAINNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.lidarr-api-rtr.priority=2"
      - "traefik.http.routers.lidarr-api-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.lidarr-feed-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-api-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-feed-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-api-rtr.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
############################# MEDIA

# Plex - Media Server
  plexms:
    image: plexinc/pms-docker:public
    container_name: plexms
    hostname: plexms
    restart: unless-stopped
    networks:
      - traefik_net
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "$PLEX_WEB_TOOLS_PORT:33400"
    volumes:
      - $USERDIR/docker/plexms:/config
      - $MEDIADIR/Downloads:/Downloads
      - $MEDIADIR/TV:/tv
      - $MEDIADIR/Movies:/movies
      - $MEDIADIR/Music/iTunes/iTunes/Music:/Music
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
#      - $USERDIR/Downloads/plex_tmp:/transcode
    environment:
      TZ: $TZ
      HOSTNAME: "plex"
      PLEX_CLAIM: $PLEX_CLAIM
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: "http://$SERVER_IP:$PLEX_PORT/,https://plex.defreitas.io:443/"
      ALLOWED_NETWORKS: $LOCAL_NETWORKS
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https,https-web"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      - "traefik.http.routers.plexms-rtr.tls=true"
      - "traefik.http.routers.plexms-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"


# Tautulli - Previously PlexPy. Plex statistics and monitoring
# Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      - t2_proxy
    volumes:
      - $USERDIR/docker/tautulli/config:/config
      - $USERDIR/docker/tautulli/logs:/logs:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.tls=true"
      - "traefik.http.routers.tautulli-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"


############################# MEDIA FILE MANAGEMENT

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    hostname: jackett
    restart: unless-stopped
    dns:
      - 10.2.15.7
    networks:
      - traefik_net
    volumes:
      - $USERDIR/docker/jackett:/config
      - $MEDIADIR/Downloads:/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`banana.$DOMAINNAME`)"
      - "traefik.http.routers.jackett-rtr.tls=true"
      - "traefik.http.routers.jackett-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.jackett-api-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-api-rtr.rule=Host(`banana.$DOMAINNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.jackett-api-rtr.tls=true"
      - "traefik.http.routers.jackett-api-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.jackett-api-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.routers.jackett-api-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

############################# MAINTENANCE

        # resilio-sync:
        #   image: linuxserver/resilio-sync
        #   container_name: resilio-sync
        #   volumes:
        #     - $USERDIR/sync/config:/config
        #     - $USERDIR/sync/downloads:/downloads
        #     - /export/sync:/sync
        #   ports:
        #     - 55555:55555
        #     - 55555:55555/udp
        #   networks:
        #     - traefik
        #   restart: unless-stopped
        #   labels:
        #     - "traefik.enable=true"
        #     ## HTTP Routers
        #     - "traefik.http.routers.resilio-rtr-oauth.entrypoints=https"
        #     - "traefik.http.routers.resilio-rtr-oauth.rule=Host(`sync.$DOMAINNAME`)"
        #     - "traefik.http.routers.resilio-rtr-oauth.tls=true"
        #     - "traefik.http.routers.resilio-rtr-oauth.tls.certresolver=dns-cloudflare"
        #     ## Middlewares
        #     - "traefik.http.routers.resilio-rtr-oauth.middlewares=chain-oauth@file"
        #     ## HTTP Services
        #     - "traefik.http.routers.resilio-rtr-oauth.service=resilio-svc"
        #     - "traefik.http.services.resilio-svc.loadbalancer.server.port=8888"

        #   networks:
        #     - t2_proxy
        #   logging:
        #     driver: "json-file"
        #     options:
        #       max-size: "10m"

  transmission-vpn:
    image: haugene/transmission-openvpn
    container_name: transmission-vpn
    hostname: transmission
    restart: unless-stopped
    networks:
      - traefik_net
        # ports:
        #   - "10020:10020"
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    dns:
      - 1.1.1.1
      - 1.0.0.1
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-rtr.rule=Host(`apple.$DOMAINNAME`)"
      - "traefik.http.routers.transmission-rtr.tls=true"
      - "traefik.http.routers.transmission-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.transmission-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.transmission-rtr.service=transmission-svc"
      - "traefik.http.services.transmission-svc.loadbalancer.server.port=9091"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $USERDIR/docker/transmission-vpn/data:/data
      - $USERDIR/docker/transmission-vpn/config:/config
      - $MEDIADIR/Downloads:/downloads
    environment:
      OPENVPN_PROVIDER: NORDVPN
      OPENVPN_USERNAME: $NORDVPN_USERNAME
      OPENVPN_PASSWORD: $NORDVPN_PASSWORD
      NORDVPN_COUNTRY: "GB"
      NORDVPN_CATEGORY: "legacy_p2p"
      NORDVPN_PROTOCOL: "udp"
      OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60 --mute-replay-warnings
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK_SET: 002
#      TRANSMISSION_UMASK: 002
      TRANSMISSION_RATIO_LIMIT: 0.01
      TRANSMISSION_RATIO_LIMIT_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_DOWN: 2000
#      TRANSMISSION_ALT_SPEED_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_UP: 1000
      TRANSMISSION_ALT_SPEED_TIME_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_TIME_BEGIN: 540
      TRANSMISSION_ALT_SPEED_TIME_END: 1020
      TRANSMISSION_ALT_SPEED_TIME_DAY: 127
      TRANSMISSION_PEER_PORT: 10020
      TRANSMISSION_PORT_FORWARDING_ENABLED: "false"
#      TRANSMISSION_SPEED_LIMIT_DOWN: 6000
#      TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED: "true"
      TRANSMISSION_SPEED_LIMIT_UP: 500
      TRANSMISSION_SPEED_LIMIT_UP_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /downloads/incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /downloads
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /downloads/completed
      TRANSMISSION_DHT_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_QUEUE_ENABLED: "false"
      TRANSMISSION_RPC_USERNAME: $TRANSMISSION_RPC_USERNAME
      TRANSMISSION_RPC_PASSWORD: $TRANSMISSION_RPC_PASSWORD
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  diskover:
    image: linuxserver/diskover
    container_name: diskover
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - ES_USER=elastic
      - ES_PASS=changeme
      - RUN_ON_START=true
      - USE_CRON=true
      - DISKOVER_OPTS=-a --finddupes --inchardlinks
    volumes:
      - $USERDIR/diskover/config:/config
      - /export:/data
    restart: unless-stopped
    depends_on:
      - elasticsearch
      - redis
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.diskover-rtr.entrypoints=https"
      - "traefik.http.routers.diskover-rtr.rule=Host(`disk.$DOMAINNAME`)"
      - "traefik.http.routers.diskover-rtr.tls=true"
      - "traefik.http.routers.diskover-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.rq-dashboard-rtr.entrypoints=https"
      - "traefik.http.routers.rq-dashboard-rtr.rule=Host(`rq.$DOMAINNAME`)"
      - "traefik.http.routers.rq-dashboard-rtr.tls=true"
      - "traefik.http.routers.rq-dashboard-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.diskover-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.rq-dashboard-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.diskover-rtr.service=diskover-svc"
      - "traefik.http.routers.rq-dashboard-rtr.service=diskover-svc"
      - "traefik.http.services.diskover-svc.loadbalancer.server.port=80"
      - "traefik.http.services.rq-dashboard-svc.loadbalancer.server.port=9181"
    networks:
      - t2_proxy

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.9
    volumes:
      - $USERDIR/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
        #      - bootstrap.memory_lock=true
        #      - "ES_JAVA_OPTS=-Xms2048m -Xmx4096m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - t2_proxy

  redis:
    container_name: redis
    image: redis:alpine
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $USERDIR/redis:/data
    networks:
      - t2_proxy

  makemkv:
    container_name: makemkv
    image: jlesage/makemkv
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - AUTO_DISC_RIPPER=1
      - AUTO_DISC_RIPPER_EJECT=1
      - AUTO_DISC_RIPPER_FORCE_UNIQUE_OUTPUT_DIR=1
    volumes:
      - $USERDIR/makemkv/config:/config:rw
      - $MEDIADIR/Downloads/makemkv:/output:rw
    devices:
      - /dev/sr1
      - /dev/sg11
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.makemkv-rtr.entrypoints=https"
      - "traefik.http.routers.makemkv-rtr.rule=Host(`makemkv.$DOMAINNAME`)"
      - "traefik.http.routers.makemkv-rtr.tls=true"
      - "traefik.http.routers.makemkv-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.makemkv-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.makemkv-rtr.service=makemkv-svc"
      - "traefik.http.services.makemkv-svc.loadbalancer.server.port=5800"
    networks:
      - t2_proxy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
